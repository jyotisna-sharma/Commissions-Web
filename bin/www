#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var config = require('config');
//-------------------------used for clustering-------------------------------------------
var RunServerWithCluster = config.get('RunServerWithCluster') || false
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port)

/**
 * Create HTTP server.
 */
var cluster = require('cluster')
var numCPUs = require('os').cpus().length

//-----------------------------------------------------------------

/**
 * Get port from environment and store in Express.
 */
var server
process.on('uncaughtException', function (exception) {
  console.log(exception)
})
if (RunServerWithCluster) {
  if (cluster.isMaster) {
    for (var i = 0; i < numCPUs; i++) {
      cluster.fork()
    }

    cluster.on('exit', function (worker, code, signal) {
      cluster.fork()
    })
  } else {
    server = http.createServer(app)
    server.listen(port)
   // SocketServer.connect(server)
    server.on('error', onError)
    server.on('listening', onListening)
  }
} else {

  server = http.createServer(app)
  server.listen(port)
  //SocketServer.connect(server)
  server.on('error', onError)
  server.on('listening', onListening)
}





/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
